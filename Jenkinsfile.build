pipeline {

  agent any

  stages {
    stage('SonarQube Analysis') {
      steps {
        script {
          scannerHome = tool 'SonarQube Scanner 4.2'

          if(CHANGE_ID){
            ADDITIONAL_ARG='-Dsonar.pullrequest.key=$CHANGE_ID -Dsonar.pullrequest.branch=$BRANCH_NAME'
          } else{
            ADDITIONAL_ARG='-Dsonar.branch.name=$BRANCH_NAME'
          }
        }
        withCredentials([string(credentialsId: 'sonarqube-token', variable: 'sonarLogin')]) {
          withSonarQubeEnv('SonarCloud') {
            sh """
              ${scannerHome}/bin/sonar-scanner \
                -Dsonar.host.url=https://sonarcloud.io \
                -Dsonar.organization=james-ni \
                -Dsonar.login=${sonarLogin} \
                -Dsonar.projectName=surveydonkey \
                -Dsonar.projectVersion=${env.BUILD_NUMBER} \
                -Dsonar.projectKey=surveydonkey.service.poll \
                -Dsonar.sources=src/ \
                ${ADDITIONAL_ARG}
            """
          }
        }
      }
    }
    stage("Quality Gate") {
        steps {
            timeout(time: 60, unit: 'SECONDS') {
                waitForQualityGate abortPipeline: true
            }
        }
    }
    stage("build") {
      steps {
        sh 'make build'
      }
    }
  }
}
AWSTemplateFormatVersion: 2010-09-09

Parameters:
  Environment:
    Type: String
    Description: the type of environment
    AllowedValues:
      - dev
      - int
      - staging
      - prod
  AppName:
    Type: String
  ServiceName:
    Type: String
  AppVersion:
    Type: String
    Default: v1
  CodeBucket:
      Type: String
  CodePrefix:
    Type: String


Resources:
  DefaultLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${AppName}-${Environment}-${ServiceName}-DefaultLambdaExecutionRole-${AppVersion}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - 'lambda.amazonaws.com'
            Action:
              - sts:AssumeRole

  DefaultPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub '${AppName}-${Environment}-${ServiceName}-DefaultPolicy-${AppVersion}'
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action: "*"
            Resource: "*"
      Roles:
        - Ref: "DefaultLambdaExecutionRole"

  GreetingFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: !Sub '${AppName}-${Environment}-${ServiceName}-Greeting-${AppVersion}'
      Description: 'say hello to users'
      MemorySize: 128
      Timeout: 30
      Runtime: python3.6
      Code:
        S3Bucket: !Sub '${CodeBucket}'
        S3Key: !Sub '${CodePrefix}/${ServiceName}.zip'
      Role:
        Fn::GetAtt:
          - "DefaultLambdaExecutionRole"
          - "Arn"
      Handler: 'handlers/greeting.handler'

  GoodbyeFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: !Sub '${AppName}-${Environment}-${ServiceName}-Goodbye-${AppVersion}'
      Description: 'say goodbye to users'
      MemorySize: 128
      Timeout: 30
      Runtime: python3.6
      Code:
        S3Bucket: !Sub '${CodeBucket}'
        S3Key: !Sub '${CodePrefix}/${ServiceName}.zip'
      Role:
        Fn::GetAtt:
          - "DefaultLambdaExecutionRole"
          - "Arn"
      Handler: 'handlers/goodbye.handler'

  CreatePollFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: !Sub '${AppName}-${Environment}-${ServiceName}-CreatePoll-${AppVersion}'
      Description: 'create a poll'
      MemorySize: 128
      Timeout: 30
      Runtime: python3.6
      Code:
        S3Bucket: !Sub '${CodeBucket}'
        S3Key: !Sub '${CodePrefix}/${ServiceName}.zip'
      Role:
        Fn::GetAtt:
          - "DefaultLambdaExecutionRole"
          - "Arn"
      Handler: 'handlers/create_poll.handler'

  UpdateDBFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: !Sub '${AppName}-${Environment}-${ServiceName}-UpdateDB-${AppVersion}'
      Description: 'database migration of Poll service'
      MemorySize: 128
      Timeout: 30
      Runtime: python3.6
      Code:
        S3Bucket: !Sub '${CodeBucket}'
        S3Key: !Sub '${CodePrefix}/${ServiceName}.zip'
      Role:
        Fn::GetAtt:
          - "DefaultLambdaExecutionRole"
          - "Arn"
      Handler: 'handlers/update_db.handler'

  MyCustomResource:
    Type: "Custom::TestLambdaCrossStackRef"
    Properties:
      ServiceToken: !GetAtt UpdateDBFunction.Arn
      Code:
        S3Bucket: !Sub '${CodeBucket}'
        S3Key: !Sub '${CodePrefix}/${ServiceName}.zip'

Outputs:
  GreetingFunctionArn:
    Value: !GetAtt GoodbyeFunction.Arn